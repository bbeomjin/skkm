condi_p = function(x, mu, sigma)
{
res = 1 / (2 * pi * prod(sigma)) *
prod(exp(-1 / (2 * sigma) * (x - mu)^2))
return(res)
}
x = c(20, 50)
mu = c(16, 21)
x = c(20, 50)
mu = c(16, 21)
sigma = c(2.65, 18.19)
condi_p(x, mu, sigma)
dnorm(20, 16, 2.65)
dnorm(50, 21, 18.19)
dnorm(20, 16, 2.65) * dnorm(50, 21, 18.19)
condi_p = function(x, mu, sigma)
{
res = 1 / (2 * pi * prod(sigma)) *
prod(exp(-1 / (2 * sigma^2) * (x - mu)^2))
return(res)
}
x = c(20, 50)
mu = c(16, 21)
sigma = c(2.65, 18.19)
condi_p(x, mu, sigma)
dnorm(20, 16, 2.65) * dnorm(50, 21, 18.19) * 0.5
dnorm(20, 27, 3) * dnorm(50, 66, 22.65) * 0.5
a = dnorm(20, 27, 3) * dnorm(50, 66, 22.65) * 0.5
print(a, digits = 10)
0.000059
a = dnorm(20, 16, 2.65) * dnorm(50, 21, 18.19)
a = dnorm(20, 16, 2.65) * dnorm(50, 21, 18.19)
b = dnorm(20, 27, 3) * dnorm(50, 66, 22.65)
a / (a + b)
b / (a + b)
require(naivebayes)
install.packages("naivebayes")
require(naivebayes)
?naive_bayes
dat = data.frame(season = rep(c("spring", "summer"), each = 3),
temp = c(15, 14, 19, 24, 30, 27),
rainfall = c(10, 42, 11, 90, 45, 63))
?gaussian_naive_bayes
gaussian_naive_bayes(dat[, -1], dat$season)
gaussian_naive_bayes(dat[, -1],
dat$season, prior = c(0.5, 0.5))
fit = gaussian_naive_bayes(dat[, -1],
dat$season, prior = c(0.5, 0.5))
predict(fit, c(20, 50))
predict(fit, matrix(c(20, 50), byrow = TRUE))
matrix(c(20, 50), byrow = TRUE)
predict(fit, matrix(c(20, 50), nrow = 1))
class(fit)
predict(fit, matrix(c(20, 50), nrow = 1), type = "prob")
predict(fit, data.frame(temp = 20, rainfall = 50), type = "prob")
data.frame(temp = 20, rainfall = 50)
predict(fit, as.matrix(data.frame(temp = 20, rainfall = 50)),
type = "prob")
b
a = dnorm(20, 16, 2.65) * dnorm(50, 21, 18.19)
a
b / 2
0.00006
?naive_bayes
spring = dnorm(x, mu, sigma)
spring
spring = prod(dnorm(x, mu, sigma))
spring
a = dnorm(20, 16, 2.65) * dnorm(50, 21, 18.19)
a
mu_sp = c(16, 21)
sigma_sp = c(2.65, 18.19)
sigma_su = c(3, 22.65)
summer = prod(dnorm(x, mu_su, sigma_su))
mu_su = c(27, 66)
sigma_su = c(3, 22.65)
spring = prod(dnorm(x, mu_sp, sigma_sp))
summer = prod(dnorm(x, mu_su, sigma_su))
summer
b = dnorm(20, 27, 3) * dnorm(50, 66, 22.65)
b
prior = c(0.5, 0.5)
prior * c(spring, summer)
spring / (spring + summer)
spring / (spring + summer)
summer / (spring + summer)
prior[1] * spring / (spring + summer)
prior[2] * summer / (spring + summer)
spring = prod(dnorm(x, mu_sp, sigma_sp))
summer = prod(dnorm(x, mu_su, sigma_su))
prior * c(spring, summer)
prior[1] * spring / (spring + summer)
prior[2] * summer / (spring + summer)
(spring + summer)
prior[1] * spring / (spring + summer)
prior[2] * summer / (spring + summer)
nomi = prior * c(spring, summer)
numer = prior * c(spring, summer)
numer / sum(numer)
numer
dat = data.frame(season = rep(c("spring", "summer"), each = 3),
temp = c(15, 14, 19, 24, 30, 27),
rainfall = c(10, 42, 11, 90, 45, 63))
fit = gaussian_naive_bayes(dat[, -1],
dat$season, prior = c(0.5, 0.5))
predict(fit, as.matrix(data.frame(temp = 20, rainfall = 50)),
type = "prob")
901 / 1003
1 / 1002
901 / 1002
11 / 1002
1 / 3 + 1 / 3 + 1 / 4
install.packages("languageserver")
remotes::install_github("REditorSupport/languageserver")
kmeans
?kmeans
require(kernlab)
?kkmeans
35 / 7
require(kernlab)
?kernel
?kernelMatrix
?polydot
setwd("C:/Users/User/Github/skkm")
usethis::use_mit_license()
devtools::document()
